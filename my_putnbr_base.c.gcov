        -:    0:Source:my_putnbr_base.c
        -:    0:Graph:my_putnbr_base.gcno
        -:    0:Data:my_putnbr_base.gcda
        -:    0:Runs:2
        -:    1:#include <limits.h>
        -:    2:
        1:    3:int my_strlen(const char *str)
        -:    4:{
        1:    5:    int count = 0;
        -:    6:
       17:    7:    for (; str && *str != 0; ++str, ++count);
        1:    8:    return count;
        -:    9:}
        -:   10:
    #####:   11:char *my_strcpy(char *dest, const char *src)
        -:   12:{
    #####:   13:    for (int i = 0; src && dest && i <= my_strlen(src); i++)
    #####:   14:        dest[i] = src[i];
    #####:   15:    return dest;
        -:   16:}
        -:   17:
    #####:   18:char *my_revstr(char *str)
        -:   19:{
    #####:   20:    int length = my_strlen(str);
        -:   21:    char s;
        -:   22:
    #####:   23:    for (int i = 0; i < length / 2; i++) {
    #####:   24:        s = str[i];
    #####:   25:        str[i] = str[length - 1 - i];
    #####:   26:        str[length - 1 - i] = s;
        -:   27:    }
    #####:   28:    return str;
        -:   29:}
        -:   30:
    #####:   31:int my_getnbr(const char *str)
        -:   32:{
    #####:   33:    long long number = 0;
    #####:   34:    int negative = 1;
        -:   35:
    #####:   36:    for (; *str == '-' || *str == '+'; str++)
    #####:   37:        (*str == '-') ? negative *= -1 : 0;
    #####:   38:    for (; str && *str != '\0' && *str >= '0' && *str <= '9'; str++) {
    #####:   39:        number *= 10;
    #####:   40:        number += *str - '0';
        -:   41:    }
    #####:   42:    return (number < INT_MIN || number > INT_MAX) ? 0 : number * negative;
        -:   43:}
        -:   44:
        5:   45:void my_putchar(char c)
        -:   46:{
        5:   47:    write(1, &c, 1);
        5:   48:}
        -:   49:
        6:   50:void test(int nbr, char const *base)
        -:   51:{
        6:   52:    if (nbr == 0)
        1:   53:        return;
        5:   54:    test(nbr / 10, base);
        5:   55:    my_putchar(base[nbr % 10]);
        -:   56:}
        -:   57:
        1:   58:int my_putnbr_base(int nbr, char const *base)
        -:   59:{
        1:   60:    int length = my_strlen(base);
        -:   61:
        1:   62:    test(nbr, base);
        1:   63:    return (nbr);
        -:   64:}
